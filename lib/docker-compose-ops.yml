version: '3'

services:
  mysql-server:
    image: mysql
    container_name: mysql-server
    environment:
      - MYSQL_ROOT_PASSWORD=changeme
      - MYSQL_DATABASE=mydb
    ports:
      - "3306:3306"
    volumes:
      - ~/Development/mount/mysql:/var/lib/mysql
    networks:
      - sql-server-net

  mssql-server:
    image: mcr.microsoft.com/mssql/server
    container_name: mssql-server
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=changeme
    ports:
      - "1433:1433"
    volumes:
      - ~/Development/mount/mssql:/var/opt/mssql/data
    networks:
      - sql-server-net

  postgresql-server:
    image: postgres
    container_name: postgresql-server
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=changeme
      - POSTGRES_DB=mydb
    ports:
      - "5432:5432"
    volumes:
      - ~/Development/mount/postgresql:/var/lib/postgresql/data
    networks:
      - sql-server-net

  # Use as UI for MySql, MS SQL and PostgreSQL (use container names for 'server')
  sql-ui:
    image: adminer
    container_name: sql-ui
    ports:
      - 8080:8080
    networks:
      - sql-server-net
    depends_on:
      - mysql-server
      - mssql-server
      - postgresql-server

  rabbitmq-server:
    image: rabbitmq:3.9-management
    container_name: rabbitmq-server
    environment:
      - INIT_DAEMON=docker-compose-rabbitmq
    ports:
      - 4369:4369
      - 5671:5671
      - 5672:5672
      - 15672:15672
    networks:
      - rabbitmq-server-net

  redis-server:
    image: redis
    container_name: redis-server
    restart: always
    environment:
      - INIT_DAEMON=docker-compose-ops
      - REDIS_MAX_MEMORY_LIMIT=5gb
      - REDIS_MAX_MEMORY_POLICY=allkeys-lru
    ports:
      - 6379:6379
    volumes:
      - ~/Development/mount/redis:/data
    command: sh -c "redis-server --loglevel warning --maxmemory $${REDIS_MAX_MEMORY_LIMIT} --maxmemory-policy $${REDIS_MAX_MEMORY_POLICY}"
    networks:
      - redis-server-net

  dynamodb-server:
    image: amazon/dynamodb-local
    container_name: dynamodb-server
    environment:
      - ACCEPT_EULA=Y
    ports:
      - "8000:8000"
    volumes:
      - ~/Development/mount/dynamodb:/home/dynamodblocal/data
    command: -jar DynamoDBLocal.jar -sharedDb -dbPath /home/dynamodblocal/data/
    networks:
      - dynamodb-server-net

  mongodb-server:
    image: mongo
    container_name: mongodb-server
    restart: always
    environment:
      - INIT_DAEMON=docker-compose-ops
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=example
    ports:
      - 27017:27017
    networks:
      - mongodb-server-net

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      - INIT_DAEMON=docker-compose-ops
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=example
      - ME_CONFIG_MONGODB_URL=mongodb://root:example@mongodb-server:27017/
    networks:
      - mongodb-server-net
    depends_on:
      - mongodb-server

  elasticsearch-server:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.11.0
    container_name: elasticsearch-server
    environment:
      - INIT_DAEMON=docker-compose-ops
      - xpack.security.enabled=false
      - "discovery.type=single-node"
    ports:
      - 9200:9200
    networks:
      - elasticsearch-server-net

  kibana-server:
    image: docker.elastic.co/kibana/kibana:7.11.0
    container_name: kibana-server
    environment:
      - INIT_DAEMON=docker-compose-ops
      - ELASTICSEARCH_HOSTS=http://elasticsearch-server:9200
    ports:
      - 5601:5601
    networks:
      - elasticsearch-server-net
    depends_on:
      - elasticsearch-server

  neo4j-server:
    image: neo4j:4.4.0-enterprise
    container_name: neo4j-server
    environment:
      - INIT_DAEMON=docker-compose-ops
      - NEO4JLABS_PLUGINS=["apoc"]
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*,algo.*
      - NEO4J_dbms_default__listen__address=0.0.0.0
    ports:
      - 7474:7474
      - 7687:7687
    volumes:
      - ~/Development/mount/neo4j/conf:/conf
      - ~/Development/mount/neo4j/import:/import
      - ~/Development/mount/neo4j/logs:/logs
      - ~/Development/mount/neo4j/plugins:/plugins
    networks:
      - neo4j-server-net

  zookeeper-server:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - kafka-net

  kafka-server:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "docker-compose-kafka-topic:1:1"
    networks:
      - kafka-net
    depends_on:
      - zookeeper-server

networks:
  sql-server-net:
    driver: bridge
  dynamodb-server-net:
    driver: bridge
  rabbitmq-server-net:
    driver: bridge
  redis-server-net:
    driver: bridge
  mongodb-server-net:
    driver: bridge
  elasticsearch-server-net:
    driver: bridge
  neo4j-server-net:
    driver: bridge
  kafka-net:
    driver: bridge
